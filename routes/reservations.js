const express = require('express');
const router = express.Router();
const Reservation = require('../models/reservations');
const { checkJWT } = require('../scripts/auth'); // Middleware pour la validation du token

// Route : R√©cup√©rer toutes les r√©servations (route prot√©g√©e)
router.get('/', checkJWT, async (req, res) => {
    try {
        console.log("üîç Requ√™te GET /api/reservations re√ßue");
        console.log("üîë Utilisateur authentifi√© :", req.user);
        
        const reservations = await Reservation.find();
        console.log("‚úÖ R√©servations r√©cup√©r√©es :", reservations);
        
        res.status(200).json(reservations);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des r√©servations :", error);
        res.status(500).json({ error: error.message });
    }
});

// Route : R√©cup√©rer une r√©servation sp√©cifique (route prot√©g√©e)
router.get('/:id', checkJWT, async (req, res) => {
    try {
        console.log(`üîç Requ√™te GET /api/reservations/${req.params.id} re√ßue`);
        const reservation = await Reservation.findById(req.params.id);
        if (!reservation) {
            console.warn("‚ö†Ô∏è R√©servation non trouv√©e");
            return res.status(404).json({ error: 'Reservation not found' });
        }
        console.log("‚úÖ R√©servation trouv√©e :", reservation);
        res.status(200).json(reservation);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de la r√©servation :", error);
        res.status(500).json({ error: error.message });
    }
});

// Route : Ajouter une nouvelle r√©servation (route prot√©g√©e)
router.post('/', checkJWT, async (req, res) => {
    try {
        console.log("‚ûï Tentative d'ajout d'une r√©servation", req.body);
        const newReservation = new Reservation(req.body);
        const savedReservation = await newReservation.save();
        console.log("‚úÖ R√©servation ajout√©e :", savedReservation);
        res.status(201).json(savedReservation);
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ajout de la r√©servation :", error);
        res.status(400).json({ error: error.message });
    }
});

// Route : Mettre √† jour une r√©servation existante (route prot√©g√©e)
router.put('/:id', checkJWT, async (req, res) => {
    try {
        console.log(`‚úèÔ∏è Tentative de mise √† jour de la r√©servation ${req.params.id}`);
        const updatedReservation = await Reservation.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true, runValidators: true }
        );
        if (!updatedReservation) {
            console.warn("‚ö†Ô∏è R√©servation non trouv√©e pour mise √† jour");
            return res.status(404).json({ error: 'Reservation not found' });
        }
        console.log("‚úÖ R√©servation mise √† jour :", updatedReservation);
        res.status(200).json(updatedReservation);
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour de la r√©servation :", error);
        res.status(400).json({ error: error.message });
    }
});

// Route : Supprimer une r√©servation (route prot√©g√©e)
router.delete('/:id', checkJWT, async (req, res) => {
    try {
        console.log(`üóëÔ∏è Tentative de suppression de la r√©servation ${req.params.id}`);
        const deletedReservation = await Reservation.findByIdAndDelete(req.params.id);
        if (!deletedReservation) {
            console.warn("‚ö†Ô∏è R√©servation non trouv√©e pour suppression");
            return res.status(404).json({ error: 'Reservation not found' });
        }
        console.log("‚úÖ R√©servation supprim√©e avec succ√®s");
        res.status(200).json({ message: 'Reservation deleted successfully' });
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression de la r√©servation :", error);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;
